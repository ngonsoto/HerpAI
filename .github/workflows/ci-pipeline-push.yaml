---

name: ci-pipeline-push

on: [push]    # yamllint disable-line rule:truthy

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest

    outputs: 
      docker: ${{ steps.filter.outputs.docker }}
      python: ${{ steps.filter.outputs.python }}
      markdown: ${{ steps.filter.outputs.markdown }}
      yaml: ${{ steps.filter.outputs.yaml }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docker:
              - 'agents/**'
              - 'consumers/**'
              - 'core/**'
              - 'orchestrator/**'
              - 'prompts/**'
              - 'requirements/**'
              - 'src/**'
              - 'templates/**'
              - 'tests/**'
              - 'entrypoint.sh'
              - 'Dockerfile'
              - '.github/workflows/ci-pipeline-push.yaml'
            python:
              - '**/*.py'
            markdown:
              - '**/*.md'
            yaml:
              - '**/*.yaml'

  lint:
    name: Lint and format files
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' || needs.changes.outputs.markdown == 'true' || needs.changes.outputs.yaml == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black pylint
          pip install yamllint
          npm install -g markdownlint-cli

      - name: Run Black (python format check)
        if: ${{ needs.changes.outputs.python == 'true' }}
        run: |
          black --check . 2>&1 | tee python_black_output.txt || true

      - name: Run Pylint (python code quality check)
        if: ${{ needs.changes.outputs.python == 'true' }}
        run: |
          pylint **/*.py 2>&1 | tee pylint_output.txt || true

      - name: Run Markdownlint (Markdown format check)
        if: ${{ needs.changes.outputs.markdown == 'true' }}
        run: markdownlint "**/*.md" 2>&1 | tee markdownlint_output.txt || true

      - name: Run Yamllint (YAML code quality check)
        if: ${{ needs.changes.outputs.yaml == 'true' }}
        run: yamllint . 2>&1 | tee yamllint_output.txt || true

      - name: Collect and Save Warnings in GitHub Summary
        run: |
          echo "### 🔍 Linting & Formatting Results" >> $GITHUB_STEP_SUMMARY
          for file in \
            python_black_output.txt \
            pylint_output.txt \
            markdownlint_output.txt \
            yamllint_output.txt; \
          do
            if [ -s "$file" ]; then
              echo "#### 🚨 Issues in $file" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "$file" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          done

  test:
    name: Test application
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install coverage

      - name: Run Unit Tests with Coverage
        run: |
          coverage run -m unittest discover -s tests -p "test_*.py"

      - name: Generate Coverage Report
        run: |
          coverage report -m
          coverage xml -o coverage-${{ matrix.python-version }}.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-python-${{ matrix.python-version }}
          path: coverage-${{ matrix.python-version }}.xml

      - name: Check Coverage Threshold
        run: |
          MIN_COVERAGE=60
          ACTUAL_COVERAGE=$( \
            coverage report | grep "TOTAL" | awk '{print $4}' | sed 's/%//' \
          ) 
          echo "COVERAGE_PERCENT=$ACTUAL_COVERAGE" >> $GITHUB_ENV
          echo "Actual coverage: $ACTUAL_COVERAGE%"
          if [ "$ACTUAL_COVERAGE" -lt "$MIN_COVERAGE" ]; then
            echo \
              "##[error] Code coverage ($ACTUAL_COVERAGE%) \
               is below threshold ($MIN_COVERAGE%)"
            exit 1
          fi

  build-and-push:
    name: Push docker image to remote repo
    needs: [changes,test]
    if: ${{ needs.changes.outputs.docker == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Short Commit SHA
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/herpai-app .

      - name: Add Tags to the Image
        run: |
          docker tag ghcr.io/${{ github.repository_owner }}/herpai-app ghcr.io/${{ github.repository_owner }}/herpai-app:latest
          docker tag ghcr.io/${{ github.repository_owner }}/herpai-app ghcr.io/${{ github.repository_owner }}/herpai-app:${{ env.GIT_SHA }}

      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/herpai-app:latest
          docker push ghcr.io/${{ github.repository_owner }}/herpai-app:${{ env.GIT_SHA }}

