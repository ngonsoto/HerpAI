---

name: Lint, format and test

on: [push, pull_request]    # yamllint disable-line rule:truthy

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black pylint
          pip install yamllint
          npm install -g markdownlint-cli

      - name: Run Black (python format check)
        run: |
          black --check . 2>&1 | tee python_black_output.txt || true

      - name: Run Pylint (python code quality check)
        run: |
          pylint **/*.py 2>&1 | tee pylint_output.txt || true

      - name: Run Markdownlint (Markdown format check)
        run: markdownlint "**/*.md" 2>&1 | tee markdownlint_output.txt || true

      - name: Run Yamllint (YAML code quality check)
        run: yamllint . 2>&1 | tee yamllint_output.txt || true

      - name: Collect and Save Warnings in GitHub Summary
        run: |
          echo "### 🔍 Linting & Formatting Results" >> $GITHUB_STEP_SUMMARY
          for file in \
            python_black_output.txt \
            pylint_output.txt \
            markdownlint_output.txt \
            yamllint_output.txt; \
          do
            if [ -s "$file" ]; then
              echo "#### 🚨 Issues in $file" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "$file" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          done

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    needs: lint    # Ensure lint completed sucesfully before running tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install coverage

      - name: Run Unit Tests with Coverage
        run: |
          coverage run -m unittest discover -s tests -p "test_*.py"

      - name: Generate Coverage Report
        run: |
          coverage report -m
          coverage xml -o coverage-${{ matrix.python-version }}.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-python-${{ matrix.python-version }}
          path: coverage-${{ matrix.python-version }}.xml

      - name: Check Coverage Threshold
        run: |
          MIN_COVERAGE=60
          ACTUAL_COVERAGE=$( \
            coverage report | grep "TOTAL" | awk '{print $4}' | sed 's/%//' \
          ) 
          echo "COVERAGE_PERCENT=$ACTUAL_COVERAGE" >> $GITHUB_ENV
          echo "Actual coverage: $ACTUAL_COVERAGE%"
          if [ "$ACTUAL_COVERAGE" -lt "$MIN_COVERAGE" ]; then
            echo \
              "##[error] Code coverage ($ACTUAL_COVERAGE%) \
               is below threshold ($MIN_COVERAGE%)"
            exit 1
          fi
